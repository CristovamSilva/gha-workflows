name: Reusable quality
on:
  workflow_call:
    inputs:
      deps-directory:
        description: What folder to search for requirements.
        required: true
        type: string
      source-directory:
        description: Directory containing the source code.
        required: true
        type: string
      module-directory:
        description: Directory containing a specific module source code.
        required: false
        default: .
        type: string

      sort:
        description: Whether to run isort.
        required: false
        default: true
        type: boolean
      format:
        description: Whether to run black.
        required: false
        default: true
        type: boolean
      mypy:
        description: Whether to run black.
        required: false
        default: true
        type: boolean
      flake8:
        description: Whether to run flake8.
        required: false
        default: true
        type: boolean
      pylint:
        description: Whether to run pylint.
        required: false
        default: true
        type: boolean

    outputs:
      flake8_report_path:
        description: "Flake8 Report Path"
        value: ${{ jobs.Flake8.outputs.report_path }}
      pylint_report_path:
        description: "Pylint Report Path"
        value: ${{ jobs.Pylint.outputs.report_path }}
      mypy_report_path:
        description: "Mypy Report Path"
        value: ${{ jobs.TypeCheck.outputs.report_path }}
      black_report_path:
        description: "Black Report Path"
        value: ${{ jobs.Format.outputs.report_path }}
      isort_report_path:
        description: "iSort Report Path"
        value: ${{ jobs.Sort.outputs.report_path }}

jobs:
  Sort:
    runs-on: ubuntu-latest
    outputs:
      report_path: sort-results/sort.xml
    steps:
      - name: Load Cache & Dependencies
        uses: cristovamsilva/python-dependencies-action@master
        with:
          deps-directory: ${{ inputs.deps-directory }}
          quality: true

      - name: Sort imports using isort
        continue-on-error: true
        if: inputs.sort
        run: isort ${{ inputs.module-directory }} --diff >> sort.xml
        working-directory: ${{ inputs.source-directory }}

      - name: Upload isort results
        uses: actions/upload-artifact@v3
        with:
          name: sort-results
          path: ${{ inputs.source-directory }}/sort.xml

  Format:
    runs-on: ubuntu-latest
    outputs:
      report_path: black-results/black.xml
    steps:
      - name: Load Cache & Dependencies
        uses: cristovamsilva/python-dependencies-action@master
        with:
          deps-directory: ${{ inputs.deps-directory }}
          quality: true

      - name: Format using Black
        continue-on-error: true
        if: inputs.format
        run: black ${{ inputs.module-directory }} --diff --color >> black.xml
        working-directory: ${{ inputs.source-directory }}

      - name: Upload Black results
        uses: actions/upload-artifact@v3
        with:
          name: black-results
          path: ${{ inputs.source-directory }}/black.xml

  TypeCheck:
    runs-on: ubuntu-latest
    outputs:
      report_path: mypy-results/mypy.xml
    steps:
      - name: Load Cache & Dependencies
        uses: cristovamsilva/python-dependencies-action@master
        with:
          deps-directory: ${{ inputs.deps-directory }}
          quality: true

      - name: Format using MyPy
        continue-on-error: true
        if: inputs.mypy
        run: mypy ${{ inputs.module-directory }} >> mypy.xml
        working-directory: ${{ inputs.source-directory }}

      - name: Upload MyPy results
        uses: actions/upload-artifact@v3
        with:
          name: mypy-results
          path: ${{ inputs.source-directory }}/mypy.xml

  Pylint:
    runs-on: ubuntu-latest
    outputs:
      report_path: pyliynt-results/pyliynt.xml
    steps:
      - name: Load Cache & Dependencies
        uses: cristovamsilva/python-dependencies-action@master
        with:
          deps-directory: ${{ inputs.deps-directory }}
          quality: true

      - name: Lint with PyLint
        continue-on-error: true
        if: inputs.pylint
        run: pylint ${{ inputs.module-directory }} --output-format=parseable >> pylint.xml
        working-directory: ${{ inputs.source-directory }}

      - name: Upload PyLint results
        uses: actions/upload-artifact@v3
        with:
          name: pylint-results
          path: ${{ inputs.source-directory }}/pylint.xml

  Flake8:
    runs-on: ubuntu-latest
    outputs:
      report_path: flake8-results/flake8.xml
    steps:
      - name: Load Cache & Dependencies
        uses: cristovamsilva/python-dependencies-action@master
        with:
          deps-directory: ${{ inputs.deps-directory }}
          quality: true

      - name: Lint with Flake8
        continue-on-error: true
        if: inputs.flake8
        run: flake8 ${{ inputs.module-directory }} --count --exit-zero --select=E9,F63,F7,F82 --show-source --statistics >> flake8.xml
        working-directory: ${{ inputs.source-directory }}

      - name: Upload Flake8 results
        uses: actions/upload-artifact@v3
        with:
          name: flake8-results
          path: ${{ inputs.source-directory }}/flake8.xml
